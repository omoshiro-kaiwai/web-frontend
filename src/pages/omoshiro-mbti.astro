---
// おもしろMBTI診断ページ
const mbtiTypes = {
  'BPPP': { name: 'パッションボケ', description: 'パワフルで情熱的なボケキャラ。場を盛り上げる天才！' },
  'BPPA': { name: 'アグレッシブボケ', description: '攻撃的な笑いで周囲を巻き込むボケの戦士。' },
  'BPCP': { name: 'クールボケ', description: 'クールに決めるボケ。計算されたおもしろさが魅力。' },
  'BPCA': { name: 'ストイックボケ', description: '冷静沈着に攻めるボケ。じわじわ笑いを取る。' },
  'BSPP': { name: 'センスボケ', description: 'センスで勝負する平和主義ボケ。言葉のセンスが光る。' },
  'BSPA': { name: 'アーティストボケ', description: 'センスと攻撃性を併せ持つ芸術派ボケ。' },
  'BSCP': { name: 'インテリボケ', description: 'クールでセンシティブな知的ボケ。高度な笑いを追求。' },
  'BSCA': { name: 'シニカルボケ', description: 'クールに攻めるセンス派。皮肉とウィットが武器。' },
  'TPPP': { name: 'ハイパーツッコミ', description: 'パワフルで情熱的なツッコミ。圧倒的な存在感！' },
  'TPPA': { name: 'アタッカーツッコミ', description: '攻撃的なツッコミで場を支配する。容赦なし！' },
  'TPCP': { name: 'スマートツッコミ', description: 'クールに決めるツッコミ。スタイリッシュな指摘。' },
  'TPCA': { name: 'シャープツッコミ', description: 'クールかつ鋭いツッコミ。一刀両断の切れ味。' },
  'TSPP': { name: 'やさしいツッコミ', description: 'センスと優しさのツッコミ。人を傷つけない笑い。' },
  'TSPA': { name: 'スマッシュツッコミ', description: 'センスで鋭く攻めるツッコミ。言葉の達人。' },
  'TSCP': { name: 'ジェントルツッコミ', description: 'クールでセンシティブなツッコミ。大人の余裕。' },
  'TSCA': { name: 'プロフェッショナルツッコミ', description: 'クール×センス×アタックの完璧主義ツッコミ。' },
};
---

<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>おもしろMBTI診断</title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Hiragino Kaku Gothic ProN', 'Hiragino Sans', 'Meiryo', sans-serif;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      min-height: 100vh;
      padding: 20px;
    }

    .container {
      max-width: 900px;
      margin: 0 auto;
    }

    .header {
      text-align: center;
      color: white;
      margin-bottom: 40px;
    }

    .header h1 {
      font-size: 3rem;
      margin-bottom: 10px;
      text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
    }

    .header p {
      font-size: 1.2rem;
      opacity: 0.9;
    }

    .card {
      background: white;
      border-radius: 20px;
      padding: 40px;
      box-shadow: 0 20px 60px rgba(0,0,0,0.3);
      margin-bottom: 30px;
    }

    .start-section {
      text-align: center;
    }

    .start-btn {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      border: none;
      padding: 20px 60px;
      border-radius: 30px;
      font-size: 1.5rem;
      font-weight: bold;
      cursor: pointer;
      transition: all 0.3s ease;
      box-shadow: 0 10px 30px rgba(102, 126, 234, 0.4);
    }

    .start-btn:hover {
      transform: translateY(-5px);
      box-shadow: 0 15px 40px rgba(102, 126, 234, 0.6);
    }

    .start-description {
      font-size: 1.1rem;
      color: #666;
      margin: 20px 0 40px;
      line-height: 1.8;
    }

    .question-section {
      display: none;
    }

    .question-section.active {
      display: block;
      animation: fadeIn 0.5s ease-in;
    }

    @keyframes fadeIn {
      from {
        opacity: 0;
        transform: translateY(20px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .progress-info {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
      color: #666;
      font-size: 0.9rem;
    }

    .progress-bar {
      width: 100%;
      height: 8px;
      background: #e0e0e0;
      border-radius: 10px;
      margin-bottom: 30px;
      overflow: hidden;
    }

    .progress-fill {
      height: 100%;
      background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
      transition: width 0.3s ease;
      border-radius: 10px;
    }

    .question-number {
      font-size: 1rem;
      color: #667eea;
      font-weight: bold;
      margin-bottom: 15px;
    }

    .question-text {
      font-size: 1.3rem;
      font-weight: bold;
      color: #333;
      margin-bottom: 30px;
      line-height: 1.6;
    }

    .likert-scale {
      display: flex;
      flex-direction: column;
      gap: 20px;
    }

    .scale-labels {
      display: flex;
      justify-content: space-between;
      margin-bottom: 10px;
      font-size: 0.9rem;
      color: #666;
    }

    .scale-options {
      display: flex;
      justify-content: space-between;
      align-items: center;
      gap: 10px;
    }

    .scale-option {
      flex: 1;
      display: flex;
      flex-direction: column;
      align-items: center;
      cursor: pointer;
      transition: transform 0.2s ease;
    }

    .scale-option:hover {
      transform: scale(1.1);
    }

    .scale-circle {
      width: 50px;
      height: 50px;
      border-radius: 50%;
      border: 3px solid #d0d0d0;
      background: white;
      cursor: pointer;
      transition: all 0.3s ease;
      position: relative;
    }

    .scale-option input[type="radio"] {
      display: none;
    }

    .scale-option input[type="radio"]:checked + .scale-circle {
      border-color: #667eea;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      box-shadow: 0 4px 15px rgba(102, 126, 234, 0.5);
    }

    .scale-option input[type="radio"]:checked + .scale-circle::after {
      content: '';
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      width: 20px;
      height: 20px;
      background: white;
      border-radius: 50%;
    }

    .scale-label {
      margin-top: 8px;
      font-size: 0.75rem;
      color: #999;
      text-align: center;
    }

    .nav-buttons {
      display: flex;
      justify-content: space-between;
      margin-top: 40px;
      gap: 15px;
    }

    .nav-btn {
      padding: 12px 30px;
      border-radius: 30px;
      font-size: 1rem;
      font-weight: bold;
      cursor: pointer;
      transition: all 0.3s ease;
      border: none;
    }

    .prev-btn {
      background: white;
      color: #667eea;
      border: 2px solid #667eea;
    }

    .prev-btn:hover:not(:disabled) {
      background: #f5f5f5;
    }

    .next-btn {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
    }

    .next-btn:hover:not(:disabled) {
      transform: translateY(-2px);
      box-shadow: 0 6px 20px rgba(102, 126, 234, 0.6);
    }

    .nav-btn:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }

    .result-section {
      display: none;
      text-align: center;
    }

    .result-section.active {
      display: block;
      animation: fadeIn 0.5s ease-in;
    }

    .result-type {
      font-size: 2.5rem;
      font-weight: bold;
      color: #667eea;
      margin-bottom: 20px;
    }

    .result-image {
      width: 300px;
      height: 300px;
      margin: 30px auto;
      background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
      border-radius: 20px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 1.2rem;
      color: #666;
      box-shadow: 0 10px 30px rgba(0,0,0,0.1);
    }

    .result-description {
      font-size: 1.2rem;
      color: #555;
      line-height: 1.8;
      margin-bottom: 30px;
    }

    .result-code {
      display: inline-block;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      padding: 10px 20px;
      border-radius: 30px;
      font-size: 1.5rem;
      font-weight: bold;
      margin-bottom: 30px;
    }

    .restart-btn {
      background: white;
      color: #667eea;
      border: 3px solid #667eea;
      padding: 15px 40px;
      border-radius: 30px;
      font-size: 1.1rem;
      font-weight: bold;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .restart-btn:hover {
      background: #667eea;
      color: white;
      transform: scale(1.05);
    }

    @media (max-width: 768px) {
      .header h1 {
        font-size: 2rem;
      }

      .card {
        padding: 25px;
      }

      .scale-circle {
        width: 40px;
        height: 40px;
      }

      .scale-option input[type="radio"]:checked + .scale-circle::after {
        width: 15px;
        height: 15px;
      }

      .scale-label {
        font-size: 0.65rem;
      }

      .question-text {
        font-size: 1.1rem;
      }

      .result-image {
        width: 250px;
        height: 250px;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="header">
      <h1>🎭 おもしろMBTI診断</h1>
      <p>あなたのおもしろタイプを診断します</p>
    </div>

    <div class="card">
      <!-- スタート画面 -->
      <div class="start-section" id="startSection">
        <h2 class="question-text">あなたはどのタイプ？</h2>
        <p class="start-description">
          30の質問に答えて、あなたの「おもしろタイプ」を診断します。<br>
          ボケ派？ツッコミ派？パワー系？センス系？<br>
          各質問に7段階で答えてください。
        </p>
        <button class="start-btn" onclick="startTest()">診断スタート</button>
      </div>

      <!-- 質問セクション -->
      <div class="question-section" id="questionSection">
        <div class="progress-info">
          <span id="questionCounter">質問 1 / 30</span>
        </div>
        <div class="progress-bar">
          <div class="progress-fill" id="progressFill"></div>
        </div>

        <div class="question-number" id="questionNumber">Q1</div>
        <div class="question-text" id="questionText"></div>

        <div class="likert-scale">
          <div class="scale-labels">
            <span>そう思う</span>
            <span>そう思わない</span>
          </div>
          <div class="scale-options" id="scaleOptions">
            <label class="scale-option">
              <input type="radio" name="answer" value="7">
              <div class="scale-circle"></div>
              <div class="scale-label"></div>
            </label>
            <label class="scale-option">
              <input type="radio" name="answer" value="6">
              <div class="scale-circle"></div>
              <div class="scale-label"></div>
            </label>
            <label class="scale-option">
              <input type="radio" name="answer" value="5">
              <div class="scale-circle"></div>
              <div class="scale-label"></div>
            </label>
            <label class="scale-option">
              <input type="radio" name="answer" value="4">
              <div class="scale-circle"></div>
              <div class="scale-label"></div>
            </label>
            <label class="scale-option">
              <input type="radio" name="answer" value="3">
              <div class="scale-circle"></div>
              <div class="scale-label"></div>
            </label>
            <label class="scale-option">
              <input type="radio" name="answer" value="2">
              <div class="scale-circle"></div>
              <div class="scale-label"></div>
            </label>
            <label class="scale-option">
              <input type="radio" name="answer" value="1">
              <div class="scale-circle"></div>
              <div class="scale-label"></div>
            </label>
          </div>
        </div>

        <div class="nav-buttons">
          <button class="nav-btn prev-btn" id="prevBtn" onclick="previousQuestion()">← 前へ</button>
          <button class="nav-btn next-btn" id="nextBtn" onclick="nextQuestion()" disabled>次へ →</button>
        </div>
      </div>

      <!-- 結果表示 -->
      <div class="result-section" id="resultSection">
        <h2 class="question-text">診断結果</h2>
        <div class="result-code" id="resultCode"></div>
        <div class="result-type" id="resultType"></div>
        <div class="result-image">
          <img id="resultImage" src="" alt="診断結果イラスト" style="display: none; width: 100%; height: 100%; object-fit: cover; border-radius: 20px;">
          <span id="resultPlaceholder">イラストをここに配置</span>
        </div>
        <p class="result-description" id="resultDescription"></p>
        <button class="restart-btn" onclick="restart()">もう一度診断する</button>
      </div>
    </div>
  </div>

  <script define:inline>
    const mbtiTypes = {
      'BPPP': { name: 'パッションボケ', description: 'パワフルで情熱的なボケキャラ。場を盛り上げる天才！' },
      'BPPA': { name: 'アグレッシブボケ', description: '攻撃的な笑いで周囲を巻き込むボケの戦士。' },
      'BPCP': { name: 'クールボケ', description: 'クールに決めるボケ。計算されたおもしろさが魅力。' },
      'BPCA': { name: 'ストイックボケ', description: '冷静沈着に攻めるボケ。じわじわ笑いを取る。' },
      'BSPP': { name: 'センスボケ', description: 'センスで勝負する平和主義ボケ。言葉のセンスが光る。' },
      'BSPA': { name: 'アーティストボケ', description: 'センスと攻撃性を併せ持つ芸術派ボケ。' },
      'BSCP': { name: 'インテリボケ', description: 'クールでセンシティブな知的ボケ。高度な笑いを追求。' },
      'BSCA': { name: 'シニカルボケ', description: 'クールに攻めるセンス派。皮肉とウィットが武器。' },
      'TPPP': { name: 'ハイパーツッコミ', description: 'パワフルで情熱的なツッコミ。圧倒的な存在感！' },
      'TPPA': { name: 'アタッカーツッコミ', description: '攻撃的なツッコミで場を支配する。容赦なし！' },
      'TPCP': { name: 'スマートツッコミ', description: 'クールに決めるツッコミ。スタイリッシュな指摘。' },
      'TPCA': { name: 'シャープツッコミ', description: 'クールかつ鋭いツッコミ。一刀両断の切れ味。' },
      'TSPP': { name: 'やさしいツッコミ', description: 'センスと優しさのツッコミ。人を傷つけない笑い。' },
      'TSPA': { name: 'スマッシュツッコミ', description: 'センスで鋭く攻めるツッコミ。言葉の達人。' },
      'TSCP': { name: 'ジェントルツッコミ', description: 'クールでセンシティブなツッコミ。大人の余裕。' },
      'TSCA': { name: 'プロフェッショナルツッコミ', description: 'クール×センス×アタックの完璧主義ツッコミ。' },
    };

    // 質問データ（dimension: B/T, P/S, P/C, P/A）
    // reverse: true の場合、スコアを反転（1→7, 2→6...）
    const questions = [
      // ボケ(B) vs ツッコミ(T) - 8問
      { text: '人を笑わせるより、笑いのタイミングを見極める方が得意だ。', dimension: 'BT', reverse: true },
      { text: '予想外の行動や発言で場を盛り上げることが多い。', dimension: 'BT', reverse: false },
      { text: '誰かがボケたとき、すかさずツッコミを入れたくなる。', dimension: 'BT', reverse: true },
      { text: '自分から率先して面白いことをするのが好きだ。', dimension: 'BT', reverse: false },
      { text: '他人の言動の矛盾や面白さに気づきやすい。', dimension: 'BT', reverse: true },
      { text: '変なことを言って周りを驚かせるのが楽しい。', dimension: 'BT', reverse: false },
      { text: '話の流れを整理したり、的確にまとめるのが得意だ。', dimension: 'BT', reverse: true },
      { text: 'ふざけたり、おどけたりすることに抵抗がない。', dimension: 'BT', reverse: false },
      
      // パワー(P) vs センス(S) - 8問
      { text: '静かに言葉を選ぶより、勢いで笑いを取りたい。', dimension: 'PS', reverse: false },
      { text: '言葉のチョイスや言い回しにこだわる方だ。', dimension: 'PS', reverse: true },
      { text: '大きな声や身体を使った表現が得意だ。', dimension: 'PS', reverse: false },
      { text: '知的で洗練された笑いに魅力を感じる。', dimension: 'PS', reverse: true },
      { text: 'テンションとエネルギーで場を動かすタイプだ。', dimension: 'PS', reverse: false },
      { text: '微妙なニュアンスや言葉遊びで笑わせたい。', dimension: 'PS', reverse: true },
      { text: '迫力や勢いが笑いには重要だと思う。', dimension: 'PS', reverse: false },
      { text: 'ユーモアのセンスは知性から生まれると思う。', dimension: 'PS', reverse: true },
      
      // パッション(P) vs クール(C) - 7問
      { text: '感情を表に出して笑いを届けるのが好きだ。', dimension: 'PC', reverse: false },
      { text: '冷静に、落ち着いたトーンで面白いことを言いたい。', dimension: 'PC', reverse: true },
      { text: '熱量高く、テンション上げて笑いを作る方だ。', dimension: 'PC', reverse: false },
      { text: '淡々と、あえて感情を抑えた方が面白いと思う。', dimension: 'PC', reverse: true },
      { text: '情熱的に、全力で笑いに向き合いたい。', dimension: 'PC', reverse: false },
      { text: 'クールに決めた方がカッコいい笑いになる。', dimension: 'PC', reverse: true },
      { text: '感情の起伏が激しい方が笑いが生まれやすい。', dimension: 'PC', reverse: false },
      
      // ピース(P) vs アタック(A) - 7問
      { text: 'みんなが楽しめる優しい笑いを心がけている。', dimension: 'PA', reverse: false },
      { text: '多少刺激的でも、鋭く攻めた笑いが好きだ。', dimension: 'PA', reverse: true },
      { text: '誰も傷つけない、平和な笑いを大切にしたい。', dimension: 'PA', reverse: false },
      { text: '攻撃的なツッコミやボケにこそ笑いの本質がある。', dimension: 'PA', reverse: true },
      { text: '和やかな雰囲気を作ることを優先する。', dimension: 'PA', reverse: false },
      { text: '毒のある笑いの方が印象に残ると思う。', dimension: 'PA', reverse: true },
      { text: '全員が笑顔になれることを目指している。', dimension: 'PA', reverse: false },
    ];

    let currentQuestionIndex = 0;
    let answers = new Array(30).fill(null);

    function startTest() {
      document.getElementById('startSection').style.display = 'none';
      document.getElementById('questionSection').style.display = 'block';
      showQuestion(0);
    }

    function showQuestion(index) {
      currentQuestionIndex = index;
      const question = questions[index];
      
      document.getElementById('questionNumber').textContent = `Q${index + 1}`;
      document.getElementById('questionText').textContent = question.text;
      document.getElementById('questionCounter').textContent = `質問 ${index + 1} / 30`;
      
      // 進捗バー更新
      const progress = ((index + 1) / 30) * 100;
      document.getElementById('progressFill').style.width = progress + '%';
      
      // 前の回答を復元
      const radios = document.querySelectorAll('input[name="answer"]');
      radios.forEach(radio => {
        radio.checked = false;
        if (answers[index] && radio.value === answers[index].toString()) {
          radio.checked = true;
        }
      });
      
      // ボタンの状態更新
      updateButtons();
    }

    function updateButtons() {
      const prevBtn = document.getElementById('prevBtn');
      const nextBtn = document.getElementById('nextBtn');
      
      prevBtn.disabled = currentQuestionIndex === 0;
      
      const answered = answers[currentQuestionIndex] !== null;
      nextBtn.disabled = !answered;
      
      if (currentQuestionIndex === 29) {
        nextBtn.textContent = '結果を見る';
      } else {
        nextBtn.textContent = '次へ →';
      }
    }

    // ラジオボタンの変更を監視
    document.addEventListener('change', (e) => {
      if (e.target.name === 'answer') {
        answers[currentQuestionIndex] = parseInt(e.target.value);
        updateButtons();
      }
    });

    function nextQuestion() {
      if (answers[currentQuestionIndex] === null) return;
      
      if (currentQuestionIndex < 29) {
        showQuestion(currentQuestionIndex + 1);
      } else {
        calculateResult();
      }
    }

    function previousQuestion() {
      if (currentQuestionIndex > 0) {
        showQuestion(currentQuestionIndex - 1);
      }
    }

    function calculateResult() {
      // 各次元のスコアを計算
      let scores = {
        BT: 0, // ボケ(高) vs ツッコミ(低)
        PS: 0, // パワー(高) vs センス(低)
        PC: 0, // パッション(高) vs クール(低)
        PA: 0  // ピース(高) vs アタック(低)
      };
      
      questions.forEach((q, i) => {
        let score = answers[i];
        // reverseの場合はスコアを反転
        if (q.reverse) {
          score = 8 - score;
        }
        scores[q.dimension] += score;
      });
      
      // 各次元で多数派を判定
      const result = {
        BT: scores.BT > 28 ? 'B' : 'T',  // 8問 x 7点 / 2 = 28
        PS: scores.PS > 28 ? 'P' : 'S',  // 8問 x 7点 / 2 = 28
        PC: scores.PC > 24.5 ? 'P' : 'C', // 7問 x 7点 / 2 = 24.5
        PA: scores.PA > 24.5 ? 'P' : 'A'  // 7問 x 7点 / 2 = 24.5
      };
      
      const mbtiCode = result.BT + result.PS + result.PC + result.PA;
      showResult(mbtiCode);
    }

    function showResult(mbtiCode) {
      const result = mbtiTypes[mbtiCode];
      
      document.getElementById('questionSection').style.display = 'none';
      document.getElementById('resultCode').textContent = mbtiCode;
      document.getElementById('resultType').textContent = result.name;
      document.getElementById('resultDescription').textContent = result.description;
      
      // イラストのパスを設定（後で実際の画像を配置する想定）
      resultImage.src = `/images/mbti/${mbtiCode}.png`; // 実際の画像パス
      const resultImage = document.getElementById('resultImage');
      
      document.getElementById('resultSection').classList.add('active');
    }

    function restart() {
      currentQuestionIndex = 0;
      answers = new Array(30).fill(null);
      
      document.getElementById('resultSection').classList.remove('active');
      document.getElementById('resultSection').style.display = 'none';
      document.getElementById('startSection').style.display = 'block';
      document.getElementById('progressFill').style.width = '0%';
    }
  </script>
</body>
</html>